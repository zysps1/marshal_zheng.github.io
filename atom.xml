<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Marshal Zheng</title>
  <icon>https://www.gravatar.com/avatar/160fc9d1c18b08c2ab7f6976142efb93</icon>
  <subtitle>A brave and fearsome warrior</subtitle>
  <link href="/marshal_zheng.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/zysps1/"/>
  <updated>2019-09-03T08:09:58.806Z</updated>
  <id>https://github.com/zysps1/</id>
  
  <author>
    <name>Marshal Zheng</name>
    <email>zysps1@126.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>夜间长跑的思考</title>
    <link href="https://github.com/zysps1/2019/09/03/%E5%A4%9C%E9%97%B4%E9%95%BF%E8%B7%91%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>https://github.com/zysps1/2019/09/03/夜间长跑的思考/</id>
    <published>2019-09-03T08:05:10.000Z</published>
    <updated>2019-09-03T08:09:58.806Z</updated>
    
    <content type="html"><![CDATA[<h4 id="夜间长跑的思考"><a href="#夜间长跑的思考" class="headerlink" title="夜间长跑的思考"></a><center>夜间长跑的思考</center></h4><center>Marshal Zheng</center><center> 2019-04-13</center><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><p>​    今天也是一如既往的去跑步打卡，五公里起~</p><p>​    身体健康，才能为自己、为家庭、为祖国贡献自己的力量。</p><p>​    在跑步的过程中，自己突然产生了一些不同以往的思考，特作记录，以备后查。</p><h5 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h5><p>​    跑步的时候，鉴于我身体状态的原因，虽然很健康，也十分喜欢运动，但是仍然不能做操场上跑的最快的那一两个人。</p><h5 id="猜测"><a href="#猜测" class="headerlink" title="猜测"></a>猜测</h5><p>​    当你的身边跑过一两个飞快的人，你会自卑吗？或者会有什么其他的想法？追上他？努力让自己跑得比他快？</p><a id="more"></a><h5 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h5><p>​    可是，要认清这样一个现实：他能跑得飞快，至少比你快，说明他在此之前有比你更多的优势，在这一时刻，他的累积优势是高于你的。</p><p>​    在这种情况下，如果你执意要去追逐他，要和他并肩，要紧紧跟在他的身后，过程必然是及其痛苦，甚至可能会超过自然规律从而被自然规律约束甚至战胜。</p><p>​    换句话说，如果你本来要跑100公里，就能到达终点，但是你要用你的身体素质适应的时间跑完，这个时间无疑是很长的。然而，那些优势比你明显，前期累积能力比你强的人，可以在更短的时间跑完，或者在相等的时间内跑得更远。这时候，如果你选择在开始就紧紧地跟着他们，不被他们所甩开（违背了自然规律），当你跑了大约10公里之后，你将感受到前所未有的酸痛感和无法呼吸的压迫感（身体素质的现实），然后你有两种选择：要么继续这样跑下去，甚至倒在路上，被送去医院；要么停下来好好休息，等休息好了再上路。</p><p>​    那么，为什么不在一开始就选择第三种选择呢？</p><p>​    我选择的第三种选择是：跟着他的<strong>方向</strong>继续跑，有时候可能会找到一些捷径，但是该跑的100公里一公里都不会少，在这种情况下，整个人的精神状态、心理状态和生理状态都处在自身条件允许的80%~90%的较高水平，既不会因为过分痛苦而放弃，也不会因为没有压力而懒散。显然，这种选择的结果要比前两种都要好：无可置疑的是比送去医院要好，另一方面，平时跑步我们发现那些跑跑停停，快跑一段再休息一段的人，往往整体上都慢于一直坚持跑，不停歇的人的（乌龟和兔子赛跑的故事）。</p><p>​    在做学术的时候依旧如此。</p><p>​    那些专业领域的专家、教授、博士等等，他们都有着若干年的知识、能力和经验的积累，在某个时刻，他们的才能和视野都要高于我们。这时候，如果只是<strong>揠苗助长</strong>的想要努力尽快的追上他们，结果必然像上面讲的长跑不遵循客观规律一样。</p><p>​    每个人的时间效益可能是不同的，但是该花的时间一分都不能少，就像该跑100公里的马拉松跑99公里都不是完成比赛。我们在追求科研成果、追求学术造诣、追求个人成就的时候，千万不要忘了自己的位置，要清醒的认识自己的心理和生理、知识和能力状态，紧追不舍的不应是背影，朝着那个<strong>方向</strong>不断努力、甘坐冷板凳的人才能成功。在前进的过程中，可能会被前面的人甩开一大截，甚至视线内已经看不到他们的身影，但是只要<strong>坚持的方向</strong>没错，结合<strong>前人的方法和技巧</strong>，一直跑下去，终会跑到终点线，自己才是自己的Champion !</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;夜间长跑的思考&quot;&gt;&lt;a href=&quot;#夜间长跑的思考&quot; class=&quot;headerlink&quot; title=&quot;夜间长跑的思考&quot;&gt;&lt;/a&gt;&lt;center&gt;夜间长跑的思考&lt;/center&gt;&lt;/h4&gt;&lt;center&gt;Marshal Zheng
&lt;/center&gt;

&lt;center&gt; 2019-04-13
&lt;/center&gt;

&lt;h5 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h5&gt;&lt;p&gt;​    今天也是一如既往的去跑步打卡，五公里起~&lt;/p&gt;
&lt;p&gt;​    身体健康，才能为自己、为家庭、为祖国贡献自己的力量。&lt;/p&gt;
&lt;p&gt;​    在跑步的过程中，自己突然产生了一些不同以往的思考，特作记录，以备后查。&lt;/p&gt;
&lt;h5 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h5&gt;&lt;p&gt;​    跑步的时候，鉴于我身体状态的原因，虽然很健康，也十分喜欢运动，但是仍然不能做操场上跑的最快的那一两个人。&lt;/p&gt;
&lt;h5 id=&quot;猜测&quot;&gt;&lt;a href=&quot;#猜测&quot; class=&quot;headerlink&quot; title=&quot;猜测&quot;&gt;&lt;/a&gt;猜测&lt;/h5&gt;&lt;p&gt;​    当你的身边跑过一两个飞快的人，你会自卑吗？或者会有什么其他的想法？追上他？努力让自己跑得比他快？&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://github.com/zysps1/categories/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="个人感悟" scheme="https://github.com/zysps1/categories/%E9%9A%8F%E7%AC%94/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="随笔" scheme="https://github.com/zysps1/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="个人感悟" scheme="https://github.com/zysps1/tags/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>DFS算法、BFS算法再复习</title>
    <link href="https://github.com/zysps1/2019/09/03/DFS,BFS%E5%86%8D%E5%A4%8D%E4%B9%A0/"/>
    <id>https://github.com/zysps1/2019/09/03/DFS,BFS再复习/</id>
    <published>2019-09-03T08:03:10.000Z</published>
    <updated>2019-09-03T08:08:38.194Z</updated>
    
    <content type="html"><![CDATA[<h4 id="DFS算法、BFS算法再复习"><a href="#DFS算法、BFS算法再复习" class="headerlink" title="DFS算法、BFS算法再复习"></a>DFS算法、BFS算法再复习</h4><p>做题时遇到了有些可以用DFS算法解决的问题，所以再复习一下<strong>DFS</strong>算法和<strong>BFS</strong>算法。</p><h5 id="深度优先遍历（DFS）"><a href="#深度优先遍历（DFS）" class="headerlink" title="深度优先遍历（DFS）"></a>深度优先遍历（DFS）</h5><ol><li>访问起始顶点</li><li>若当前访问的顶点的邻接顶点有未被访问的，任选一个访问，反之回退到最近访问过的顶点，直到与起始顶点相通的全部顶点都访问完毕。</li><li>对连通图以上结束。对图中仍有顶点未被访问，选择其中一个顶点作为起始顶点继续执行step2即可。</li></ol><a id="more"></a><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p><img src="https://images0.cnblogs.com/blog2015/682679/201504/081434179612261.png" alt="img"></p><p>顶点的访问序列为：    v0 , v1 , v4 , v5 , v6 , v2 , v3（不唯一）</p><h5 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h5><p>栈存储（先进后出），访问入栈，回退出栈，字典values值标记</p><h5 id="广度优先搜索（BFS）"><a href="#广度优先搜索（BFS）" class="headerlink" title="广度优先搜索（BFS）"></a>广度优先搜索（BFS）</h5><p>从图的某一结点出发，首先依次访问该结点的所有邻接顶点 Vi1, Vi2, …, Vin 再按这些顶点被访问的先后次序依次访问与它们相邻接的所有未被访问的顶点，重复此过程，直至所有顶点均被访问为止。</p><p>——相当于逐层访问</p><h5 id="实现方法-1"><a href="#实现方法-1" class="headerlink" title="实现方法"></a>实现方法</h5><p>队列存储（先进先出），一次搜索所有邻居节点标记并入队列，以入队元素顺序出队继续进行下一层搜索。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;DFS算法、BFS算法再复习&quot;&gt;&lt;a href=&quot;#DFS算法、BFS算法再复习&quot; class=&quot;headerlink&quot; title=&quot;DFS算法、BFS算法再复习&quot;&gt;&lt;/a&gt;DFS算法、BFS算法再复习&lt;/h4&gt;&lt;p&gt;做题时遇到了有些可以用DFS算法解决的问题，所以再复习一下&lt;strong&gt;DFS&lt;/strong&gt;算法和&lt;strong&gt;BFS&lt;/strong&gt;算法。&lt;/p&gt;
&lt;h5 id=&quot;深度优先遍历（DFS）&quot;&gt;&lt;a href=&quot;#深度优先遍历（DFS）&quot; class=&quot;headerlink&quot; title=&quot;深度优先遍历（DFS）&quot;&gt;&lt;/a&gt;深度优先遍历（DFS）&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;访问起始顶点&lt;/li&gt;
&lt;li&gt;若当前访问的顶点的邻接顶点有未被访问的，任选一个访问，反之回退到最近访问过的顶点，直到与起始顶点相通的全部顶点都访问完毕。&lt;/li&gt;
&lt;li&gt;对连通图以上结束。对图中仍有顶点未被访问，选择其中一个顶点作为起始顶点继续执行step2即可。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="算法" scheme="https://github.com/zysps1/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://github.com/zysps1/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>《机器学习》西瓜书笔记——chapter 7：贝叶斯分类器</title>
    <link href="https://github.com/zysps1/2019/09/03/%E3%80%8A%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E3%80%8B%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0--chapter7%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8/"/>
    <id>https://github.com/zysps1/2019/09/03/《机器学习》西瓜书笔记--chapter7贝叶斯分类器/</id>
    <published>2019-09-03T08:03:10.000Z</published>
    <updated>2019-09-03T08:11:18.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="《机器学习》西瓜书笔记——chapter-7：贝叶斯分类器"><a href="#《机器学习》西瓜书笔记——chapter-7：贝叶斯分类器" class="headerlink" title="《机器学习》西瓜书笔记——chapter 7：贝叶斯分类器"></a><center>《机器学习》西瓜书笔记——chapter 7：贝叶斯分类器</center></h3><center> Marshal Zheng</center><center> 2019-04-16<p>西瓜书笔记更新啦！</p><h4 id="7-1-贝叶斯决策论"><a href="#7-1-贝叶斯决策论" class="headerlink" title="7.1 贝叶斯决策论"></a>7.1 贝叶斯决策论</h4><p>假设有$N$种可能类别标记，即$y = {c_1,c_2,\cdots,c_N}$，$\lambda_{ij}$是将一个真实标记为$c_j$的样本误分类为$c_i$所产生的损失，基于后验概率$P(c_i | x)$可获得将样本$x$分类为$c_i$所产生的期望损失，即在样本$x$上的“条件风险”<br>$$<br>R(c_i | x) = \sum_{j=1}^{N} \lambda_{i,j}P(c_j | x)<br>$$<br>为了最小化总体风险，就产生了贝叶斯判定准则：只需在每个样本上选择那个能使条件风险$R(c | x)$最小的类别标记，即<br>$$<br>h^<em>(x) = \mathop{\arg\max}_{c \in y} R(c | x)<br>$$<br>其中，$h^</em>(x)$为贝叶斯最优分类器，与之对应的$R(h^<em>)$为贝叶斯风险，$1-R(h^</em>)$反映了分类器所能达到的最好性能，即通过机器学习所能产生的模型精度的理论上限。</p><a id="more"></a><p>具体地，若是最小化分类错误率，则误判损失$\lambda_{ij}$可写为：<br>$$<br>\lambda_{ij} = \left{\begin{array}{cc}<br>        1, &amp; if\quad i=j\<br>        0, &amp; otherwise<br>    \end{array}\right.<br>$$<br>此时条件风险<br>$$<br>R(c_i | x) = 1-P(c | x)<br>$$<br>贝叶斯最优分类器为<br>$$<br>h^*(x) = \mathop{\arg\min}_{c \in y} P(c | x)<br>$$</p><h5 id="判别式模型"><a href="#判别式模型" class="headerlink" title="判别式模型"></a>判别式模型</h5><p>给定x，通过直接建模$P(c | x)$来预测$c$，例如决策树、BP神经网络、支持向量机等</p><p>考虑<br>$$<br>P(C | X) = \frac{P(x,c)}{P(x)}<br>$$<br>基于贝叶斯定理：<br>$$<br>P(C | X) = \frac{P(c)P(x | c)}{P(x)}<br>$$<br>其中等式右边：先验概率，样本x相对于类别c的类条件概率，归一化证据因子。</p><h5 id="生成式模型"><a href="#生成式模型" class="headerlink" title="生成式模型"></a>生成式模型</h5><p>先对联合概率分布$P(x,c)$建模，然后再由此获得$P(c | x)$</p><h4 id="7-2-极大似然估计"><a href="#7-2-极大似然估计" class="headerlink" title="7.2 极大似然估计"></a>7.2 极大似然估计</h4><p>概率模型的训练过程就是参数估计过程。</p><p>两种不同解决方案：</p><ul><li>频率主义：认为参数固定，通过优化似然函数等准则确定参数值</li><li>贝叶斯派：认为参数本身有分布，假定参数服从一个先验分布，然后基于观测数计算后验分布。</li></ul><p>remark：计算似然过程中连乘容易<em>下溢</em>，通常使用对数似然。</p><h4 id="7-3-朴素贝叶斯分类器"><a href="#7-3-朴素贝叶斯分类器" class="headerlink" title="7.3 朴素贝叶斯分类器"></a>7.3 朴素贝叶斯分类器</h4><p>采用属性条件独立性假设：对已知类别，假设所有属性独立。</p><p>有<br>$$<br>P(C | X) = \frac{P(c)P(x | c)}{P(x)} = \frac{P(c)}{P(x)} \prod_{i=1}^{d}P(x_i | c)<br>$$<br>其中d为属性数目</p><p>由于所有类别$P(x)$相同，因此有<br>$$<br>h^<em>(x) = \mathop{\arg\max}<em>{c \in y} P(c) \prod</em>{i=1}^{d}P(x_i | c)<br>$$<br>即*</em>朴素贝叶斯分类器表达式**</p><h4 id="7-4-半朴素贝叶斯分类器"><a href="#7-4-半朴素贝叶斯分类器" class="headerlink" title="7.4 半朴素贝叶斯分类器"></a>7.4 半朴素贝叶斯分类器</h4><p>适当考虑一些属性之间的依赖。</p><p>最直接：假设所有属性都依赖于同一个属性——“超父”，然后通过交叉验证等模型选择方法来确定超父属性，由此形成<em>SPODE</em>方法。</p><p>另外还有<em>TAN</em>方法（基于最大带权生成树），其算法步骤：</p><ul><li>step1 计算任意两个属性之间的条件互信息</li><li>step2 以属性为节点构建完全图，任意两个节点之间边权重设为I</li><li>step3 构建此完全图的最大带权生成树，挑选根变量，将边置为有向</li><li>step4 加入类别节点y，增加从y到每个属性的有向边。</li></ul><p><em>TAN</em>保留了强相关属性之间的依赖性。</p><p><em>AODE</em>方法：集成学习机制，独依赖分类器，无需模型选择，能通过预计算节省预测时间，也可以采取懒惰学习方式在预测时再计算，易于实现增量学习。</p><h4 id="7-5-贝叶斯网-信念网"><a href="#7-5-贝叶斯网-信念网" class="headerlink" title="7.5 贝叶斯网-信念网"></a>7.5 贝叶斯网-信念网</h4><p>借助有向无环图来刻画属性之间的依赖关系。用条件概率表来描述属性的联合概率分布。</p><p><img src="https://img2018.cnblogs.com/blog/1287558/201904/1287558-20190416100057390-249384454.png" alt="img"></p><h5 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h5><p>三种典型依赖：</p><ul><li>同父结构</li></ul><p><img src="https://img2018.cnblogs.com/blog/1287558/201904/1287558-20190416100220025-1256649231.png" alt="img"></p><ul><li>V型结构</li></ul><p><img src="https://img2018.cnblogs.com/blog/1287558/201904/1287558-20190416100240779-888349338.png" alt="img"></p><ul><li>顺序结构</li></ul><p><img src="https://img2018.cnblogs.com/blog/1287558/201904/1287558-20190416100313284-1815603280.png" alt="img"></p><p><em>分析变量间条件独立性*</em>：有向分离法，算法：</p><ul><li>step1 找出所有V型结构，在其两个父节点之间加上一条无向边</li><li>step2 将所有有向边转变为无向边</li></ul><p>由此产生“道德图”，父节点相连成为“道德化“</p><h5 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h5><p>若网络结构已知，即属性间的依赖关系已知，只需通过对训练样本“计数”，估计出每个节点的条件概率表即可。——<strong>参数学习</strong></p><p>往往现实中不知道网格结构，所以要寻找最恰当结构：评分搜索是常用方法。——<strong>结构学习</strong></p><p>评分搜索：先定义一个评分函数，以此来评估贝叶斯网与训练数据之间的期和程度，然后基于这个评分函数来寻找结构最优的贝叶斯网。</p><p>常用评分函数基于信息论准则，此类准则将学习问题看做一个数据压缩任务，学习目标是找到一个能以最短编码长度描述训练数据的模型，此时编码成都包括了描述模型自身所需的字节长度和使用该模型描述数据所需的字节长度。</p><p><strong>最小描述长度准则</strong>：选择综合编码长度最短的贝叶斯网。</p><p>不幸的是，从所有可能的网络结构空间搜索最优贝叶斯网结构是一个<strong>NP难</strong>问题。</p><p>有两种常用策略能在有限时间求得近似解：</p><ul><li>贪心发，例如从某个网络结构出发，每次调整一条边（增加、删除或者调整方向），直到评分函数值不再降低为止；</li><li>通过给网络结构施加约束来削减搜索空间，例如将网络结构限定为树形结构。</li></ul><h5 id="推断"><a href="#推断" class="headerlink" title="推断"></a>推断</h5><p>根据贝叶斯网定义的联合概率分布精确计算后验概率是十分精确的，可是这种精确推断是<strong>NP难</strong>的，所以需要近似推断。</p><p>常用<strong>吉布斯采样</strong>完成。</p><p>吉布斯采样算法收敛速度较慢，且若不能保证马尔科夫链平稳分布，可能给出错误估计</p><h4 id="7-6-EM算法"><a href="#7-6-EM算法" class="headerlink" title="7.6 EM算法"></a>7.6 EM算法</h4><p>用于估计参数隐变量（存在为观测的属性变量值）</p><p>迭代式方法，若参数已知，则可以根据训练数据推断出最优隐变量的值，反之若隐变量已知，可以方便对参数做极大似然估计。</p><p>（EM算法是非梯度优化方法）</p><p>隐变量估计也可以用梯度下降法来求解，但是指数级上升的求和项数，给计算带来问题。</p></center>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;《机器学习》西瓜书笔记——chapter-7：贝叶斯分类器&quot;&gt;&lt;a href=&quot;#《机器学习》西瓜书笔记——chapter-7：贝叶斯分类器&quot; class=&quot;headerlink&quot; title=&quot;《机器学习》西瓜书笔记——chapter 7：贝叶斯分类器&quot;&gt;&lt;/a&gt;&lt;center&gt;《机器学习》西瓜书笔记——chapter 7：贝叶斯分类器&lt;/center&gt;&lt;/h3&gt;&lt;center&gt; Marshal Zheng
&lt;/center&gt;

&lt;center&gt; 2019-04-16

&lt;p&gt;西瓜书笔记更新啦！&lt;/p&gt;
&lt;h4 id=&quot;7-1-贝叶斯决策论&quot;&gt;&lt;a href=&quot;#7-1-贝叶斯决策论&quot; class=&quot;headerlink&quot; title=&quot;7.1 贝叶斯决策论&quot;&gt;&lt;/a&gt;7.1 贝叶斯决策论&lt;/h4&gt;&lt;p&gt;假设有$N$种可能类别标记，即$y = {c_1,c_2,\cdots,c_N}$，$\lambda_{ij}$是将一个真实标记为$c_j$的样本误分类为$c_i$所产生的损失，基于后验概率$P(c_i | x)$可获得将样本$x$分类为$c_i$所产生的期望损失，即在样本$x$上的“条件风险”&lt;br&gt;$$&lt;br&gt;R(c_i | x) = \sum_{j=1}^{N} \lambda_{i,j}P(c_j | x)&lt;br&gt;$$&lt;br&gt;为了最小化总体风险，就产生了贝叶斯判定准则：只需在每个样本上选择那个能使条件风险$R(c | x)$最小的类别标记，即&lt;br&gt;$$&lt;br&gt;h^&lt;em&gt;(x) = \mathop{\arg\max}_{c \in y} R(c | x)&lt;br&gt;$$&lt;br&gt;其中，$h^&lt;/em&gt;(x)$为贝叶斯最优分类器，与之对应的$R(h^&lt;em&gt;)$为贝叶斯风险，$1-R(h^&lt;/em&gt;)$反映了分类器所能达到的最好性能，即通过机器学习所能产生的模型精度的理论上限。&lt;/p&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="算法" scheme="https://github.com/zysps1/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="机器学习" scheme="https://github.com/zysps1/categories/%E7%AE%97%E6%B3%95/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="https://github.com/zysps1/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="机器学习" scheme="https://github.com/zysps1/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>python 正则</title>
    <link href="https://github.com/zysps1/2019/09/03/python%E6%AD%A3%E5%88%99%E7%90%86%E8%A7%A3%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    <id>https://github.com/zysps1/2019/09/03/python正则理解与总结/</id>
    <published>2019-09-03T07:59:10.000Z</published>
    <updated>2019-09-03T08:09:37.054Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则理解与总结"><a href="#正则理解与总结" class="headerlink" title="正则理解与总结"></a><center>正则理解与总结</center></h3><center>written by Marshal Zheng#### 一、正则语法<ul><li><h5 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h5><ul><li>\b：匹配单词的开始或者结束</li><li>\d：匹配数字</li><li>\s：匹配任意不可见字符（空格、换行符、制表符等）</li><li>\w：匹配任意Unicode字符集，包括字母、数字、下换线、汉字等；匹配出换行符’\n’之外的任意字符</li><li>^或者\A：匹配字符串或行的起始位置</li><li>$或者\Z：匹配字符串或行的结束位置</li></ul></li><li><h5 id="限定词"><a href="#限定词" class="headerlink" title="限定词"></a>限定词</h5><ul><li>*：重复0次或更多次</li><li>+：重复1次或者更多次</li><li>？：重复0次或者1次</li><li>{n}：重复n次</li><li>{n,}：重复n次或更多次</li><li>{n,m}：重复n到m次</li></ul></li></ul><a id="more"></a><ul><li><h5 id="反义词"><a href="#反义词" class="headerlink" title="反义词"></a>反义词</h5><ul><li>\B：匹配非单词的开始或结束</li><li>\D：匹配非数字</li><li>\S：匹配任意可见字符</li><li>\W：匹配任意非Unicode字符集</li><li>[^abc]：匹配a、b、c以外的任意字符</li></ul></li><li><h5 id="字符族"><a href="#字符族" class="headerlink" title="字符族"></a>字符族</h5><ul><li>[abc]：a、b或者c</li><li>[a-zA-z]：a到z或者A到Z</li><li>[a-d[m-p]]：a到d或者m到p，并集</li><li>[a-z&amp;&amp;[def]]：d、e或者f，交集</li><li>[a-z&amp;&amp;[ ^bc]]：a到z，除了b，c，交集减去</li><li>[a-z&amp;&amp;[ ^m-p]]：a到z，减去m到p，交集减去</li></ul></li><li><h5 id="python修饰符"><a href="#python修饰符" class="headerlink" title="python修饰符"></a>python修饰符</h5><ul><li>re.A = 匹配ASCII字符类，影响\w，\W，\B,\b,\D,\d</li><li>re.I = 忽略大小写</li><li>re.L = 做本地化识别匹配</li><li>re.M = 多行匹配，影响^ or $</li><li>re.S =使 . 匹配包括换行符在内的所有字符</li><li>re.U = 匹配Unicod字符集，与re.A相对，默认设置</li><li>re.X = 忽略空格和#后面的注释以获得看起来更易懂的正则</li></ul></li></ul><h4 id="二、实例"><a href="#二、实例" class="headerlink" title="二、实例"></a>二、实例</h4><h5 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'123abc你好'</span></span><br><span class="line">re.search(<span class="string">'\d+'</span>, s).group()</span><br><span class="line">re.search(<span class="string">'\w+'</span>, s).group()</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">123</span>abc你好</span><br></pre></td></tr></table></figure><h5 id="实例2：re-A"><a href="#实例2：re-A" class="headerlink" title="实例2：re.A"></a>实例2：re.A</h5><p>修饰符 <code>A</code> 使 <code>\w</code> 只匹配 ASCII 字符，<code>\W</code> 匹配非 ASCII 字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'123abc你好'</span></span><br><span class="line">re.search(<span class="string">'\w+'</span>, s, re.A).group()</span><br><span class="line">re.search(<span class="string">'\W+'</span>, s, re.A).group()</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span>abc</span><br><span class="line">你好</span><br></pre></td></tr></table></figure><p><code>\d</code> 和 <code>\D</code>， <strong>全角和半角</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'０１２３４５６７８９'</span>    <span class="comment"># 全角数字</span></span><br><span class="line">re.search(<span class="string">'\d+'</span>, s, re.U).group()</span><br></pre></td></tr></table></figure><p>实例2：re.M</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'aaa\r\nbbb\r\nccc'</span></span><br><span class="line"></span><br><span class="line">re.findall(<span class="string">'^[\s\w]*?$'</span>, s)</span><br><span class="line">re.findall(<span class="string">'^[\s\w]*?$'</span>, s, re.M)</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'aaa\r\nbbb\r\nccc'</span>]        <span class="comment"># 单行模式</span></span><br><span class="line">[<span class="string">'aaa\r'</span>, <span class="string">'bbb\r'</span>, <span class="string">'ccc'</span>]    <span class="comment"># 多行模式</span></span><br></pre></td></tr></table></figure><p>实例3：re.S</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'aaa\r\nbbb\r\nccc'</span></span><br><span class="line"></span><br><span class="line">re.findall(<span class="string">'^.*'</span>, s)</span><br><span class="line">re.findall(<span class="string">'^.*'</span>, s, re.S)</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'aaa\r'</span>]</span><br><span class="line">[<span class="string">'aaa\r\nbbb\r\nccc'</span>]</span><br></pre></td></tr></table></figure><p>实例4：re.X</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rc = re.compile(<span class="string">r"""</span></span><br><span class="line"><span class="string">\d+ # 匹配数字</span></span><br><span class="line"><span class="string"># 和字母</span></span><br><span class="line"><span class="string">[a-zA-Z]+</span></span><br><span class="line"><span class="string">"""</span>, re.X)</span><br><span class="line">rc.search(<span class="string">'123abc'</span>).group()</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span>abc</span><br></pre></td></tr></table></figure><h4 id="三、贪婪和懒惰"><a href="#三、贪婪和懒惰" class="headerlink" title="三、贪婪和懒惰"></a>三、贪婪和懒惰</h4><h5 id="贪婪"><a href="#贪婪" class="headerlink" title="贪婪"></a>贪婪</h5><p>尽可能多的匹配</p><p><code>*</code>、<code>+</code>、<code>{n,}</code> 这些表达式属于贪婪；</p><h5 id="懒惰"><a href="#懒惰" class="headerlink" title="懒惰"></a>懒惰</h5><p>尽可能少的匹配</p><p><code>*?</code>、<code>+?</code>、<code>{n,}?</code> 这些表达式就是懒惰（在贪婪的基础上加上 <code>?</code>）。</p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'aabab'</span></span><br><span class="line">re.search(<span class="string">'a.*b'</span>, s).group()    <span class="comment"># 这就是贪婪</span></span><br><span class="line">re.search(<span class="string">'a.*?b'</span>, s).group()   <span class="comment"># 这就是懒惰</span></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aabab</span><br><span class="line">aab</span><br></pre></td></tr></table></figure><h4 id="四、自动捕获"><a href="#四、自动捕获" class="headerlink" title="四、自动捕获"></a>四、自动捕获</h4><table><thead><tr><th>(exp)</th><th>匹配exp，并捕获文本到自动命名的组里</th></tr></thead><tbody><tr><td>(?Pexp)</td><td>匹配exp，并捕获文本到名称为 name 的组里</td></tr><tr><td>(?:exp)</td><td>匹配exp，不捕获匹配的文本，也不给此分组分配组号</td></tr><tr><td>(?P=name)</td><td>匹配之前由名为 name 的组匹配的文本</td></tr></tbody></table><blockquote><p>注意：在其他语言或者网上的一些正则工具中，分组命名的语法是 <code>(?&lt;name&gt;exp)</code> 或 <code>(?&#39;name&#39;exp)</code> ，但在 Python 里，这样写会报错：This named group syntax is not supported in this regex dialect。Python 中正确的写法是：<code>(?P&lt;name&gt;exp)</code></p></blockquote><p>实例1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'姓名：张三；性别：男；电话：138123456789'</span></span><br><span class="line">m = re.search(<span class="string">'姓名[:：](\w+).*?电话[:：](\d&#123;11&#125;)'</span>, s)</span><br><span class="line"><span class="keyword">if</span> m:</span><br><span class="line">    name = m.group(<span class="number">1</span>)</span><br><span class="line">    phone = m.group(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">f'name:<span class="subst">&#123;name&#125;</span>, phone:<span class="subst">&#123;phone&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name:张三, phone:<span class="number">13812345678</span></span><br></pre></td></tr></table></figure><p>实例2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;name&gt;张三&lt;/name&gt;</span></span><br><span class="line"><span class="string">&lt;age&gt;30&lt;/age&gt;</span></span><br><span class="line"><span class="string">&lt;phone&gt;138123456789&lt;/phone&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">pattern = <span class="string">r'&lt;(?P&lt;name&gt;.*?)&gt;(.*?)&lt;/(?P=name)&gt;'</span></span><br><span class="line">It = re.findall(pattern, s)</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">'name'</span>, <span class="string">'张三'</span>), (<span class="string">'age'</span>, <span class="string">'30'</span>), (<span class="string">'phone'</span>, <span class="string">'138123456789'</span>)]</span><br></pre></td></tr></table></figure><h4 id="五、零宽断言"><a href="#五、零宽断言" class="headerlink" title="五、零宽断言"></a>五、零宽断言</h4><table><thead><tr><th>(?=exp)</th><th>匹配exp前面的位置</th></tr></thead><tbody><tr><td>(?&lt;=exp)</td><td>匹配exp后面的位置</td></tr><tr><td>(?!exp)</td><td>匹配后面跟的不是exp的位置</td></tr><tr><td>(?&lt;!exp)</td><td>匹配前面不是exp的位置</td></tr></tbody></table><blockquote><p>python中前项界定的表达式必须是定长的</p></blockquote><p>结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(?&lt;=aaa)        # 正确</span><br><span class="line">(?&lt;=aaa|bbb)    # 正确</span><br><span class="line">(?&lt;=aaa|bb)     # 错误</span><br><span class="line">(?&lt;=\d+)        # 错误</span><br><span class="line">(?&lt;=\d&#123;3&#125;)      # 正确</span><br></pre></td></tr></table></figure><h4 id="六、findall"><a href="#六、findall" class="headerlink" title="六、findall"></a>六、findall</h4><ul><li>如果没有分组，则返回整条正则匹配结果的列表；</li><li>如果有 1 个分组，则返回分组匹配到的结果的列表；</li><li>如果有多个分组，则返回分组匹配到的结果的元组的列表。</li></ul><p>实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'aaa123bbb456ccc'</span></span><br><span class="line"></span><br><span class="line">re.findall(<span class="string">'[a-z]+\d+'</span>, s)          <span class="comment"># 不包含分组</span></span><br><span class="line">re.findall(<span class="string">'[a-z]+(\d+)'</span>, s)        <span class="comment"># 包含一个分组</span></span><br><span class="line">re.findall(<span class="string">'([a-z]+(\d+))'</span>, s)      <span class="comment"># 包含多个分组</span></span><br><span class="line">re.findall(<span class="string">'(?:[a-z]+(\d+))'</span>, s)    <span class="comment"># ?: 不捕获分组匹配结果</span></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'aaa123'</span>, <span class="string">'bbb456'</span>]</span><br><span class="line">[<span class="string">'123'</span>, <span class="string">'456'</span>]</span><br><span class="line">[(<span class="string">'aaa123'</span>, <span class="string">'123'</span>), (<span class="string">'bbb456'</span>, <span class="string">'456'</span>)]</span><br><span class="line">[<span class="string">'123'</span>, <span class="string">'456'</span>]</span><br></pre></td></tr></table></figure></center>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;正则理解与总结&quot;&gt;&lt;a href=&quot;#正则理解与总结&quot; class=&quot;headerlink&quot; title=&quot;正则理解与总结&quot;&gt;&lt;/a&gt;&lt;center&gt;正则理解与总结&lt;/center&gt;&lt;/h3&gt;&lt;center&gt;written by Marshal Zheng
#### 一、正则语法

&lt;ul&gt;
&lt;li&gt;&lt;h5 id=&quot;元字符&quot;&gt;&lt;a href=&quot;#元字符&quot; class=&quot;headerlink&quot; title=&quot;元字符&quot;&gt;&lt;/a&gt;元字符&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;\b：匹配单词的开始或者结束&lt;/li&gt;
&lt;li&gt;\d：匹配数字&lt;/li&gt;
&lt;li&gt;\s：匹配任意不可见字符（空格、换行符、制表符等）&lt;/li&gt;
&lt;li&gt;\w：匹配任意Unicode字符集，包括字母、数字、下换线、汉字等；匹配出换行符’\n’之外的任意字符&lt;/li&gt;
&lt;li&gt;^或者\A：匹配字符串或行的起始位置&lt;/li&gt;
&lt;li&gt;$或者\Z：匹配字符串或行的结束位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h5 id=&quot;限定词&quot;&gt;&lt;a href=&quot;#限定词&quot; class=&quot;headerlink&quot; title=&quot;限定词&quot;&gt;&lt;/a&gt;限定词&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;*：重复0次或更多次&lt;/li&gt;
&lt;li&gt;+：重复1次或者更多次&lt;/li&gt;
&lt;li&gt;？：重复0次或者1次&lt;/li&gt;
&lt;li&gt;{n}：重复n次&lt;/li&gt;
&lt;li&gt;{n,}：重复n次或更多次&lt;/li&gt;
&lt;li&gt;{n,m}：重复n到m次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="python" scheme="https://github.com/zysps1/categories/python/"/>
    
      <category term="正则表达式" scheme="https://github.com/zysps1/categories/python/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="python" scheme="https://github.com/zysps1/tags/python/"/>
    
      <category term="正则表达式" scheme="https://github.com/zysps1/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>LATEX 符号</title>
    <link href="https://github.com/zysps1/2019/09/03/%E5%B8%B8%E7%94%A8LaTeX%E7%AC%A6%E5%8F%B7/"/>
    <id>https://github.com/zysps1/2019/09/03/常用LaTeX符号/</id>
    <published>2019-09-03T07:58:10.000Z</published>
    <updated>2019-09-03T08:10:59.426Z</updated>
    
    <content type="html"><![CDATA[<h4 id="常用latex符号"><a href="#常用latex符号" class="headerlink" title="常用latex符号"></a>常用latex符号</h4><blockquote><p>最近在用latex写论文，所以有些东西整理出来还是比每次忘了都去找要有效率，特将常用的整理如下，以备查看。</p><p>图片来自网络，仅作个人备忘用。</p></blockquote><p><img src="https://img-blog.csdn.net/20160425102452321" alt="img"></p><p><img src="https://img-blog.csdn.net/20160425102233543" alt="img"></p><a id="more"></a><p><img src="https://img-blog.csdn.net/20160425102245006" alt="img"></p><p><img src="https://img-blog.csdn.net/20160425102255522" alt="img"></p><p><img src="https://img-blog.csdn.net/20160425102304887" alt="img"></p><p><img src="https://img-blog.csdn.net/20160425102314538" alt="img"></p><p><img src="https://img-blog.csdn.net/20160425102321231" alt="img"></p><p><img src="https://img-blog.csdn.net/20160425102326710" alt="img"></p><p><img src="https://img-blog.csdn.net/20160425102332919" alt="img"></p><p><img src="https://img-blog.csdn.net/20160425102344044" alt="img"></p><p><img src="https://img-blog.csdn.net/20160425102352044" alt="img"></p><p><img src="https://img-blog.csdn.net/20160425102358648" alt="img"></p><p><img src="https://img-blog.csdn.net/20160425102406153" alt="img"></p><p><img src="https://img-blog.csdn.net/20160425102414367" alt="img"></p><p><img src="https://img-blog.csdn.net/20160425102421669" alt="img"></p><p><img src="https://img-blog.csdn.net/20160425102429414" alt="img"></p><p><img src="https://img-blog.csdn.net/20160425102436966" alt="img"></p><p><img src="https://img-blog.csdn.net/20160425102444185" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;常用latex符号&quot;&gt;&lt;a href=&quot;#常用latex符号&quot; class=&quot;headerlink&quot; title=&quot;常用latex符号&quot;&gt;&lt;/a&gt;常用latex符号&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;最近在用latex写论文，所以有些东西整理出来还是比每次忘了都去找要有效率，特将常用的整理如下，以备查看。&lt;/p&gt;
&lt;p&gt;图片来自网络，仅作个人备忘用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20160425102452321&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20160425102233543&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="写作" scheme="https://github.com/zysps1/categories/%E5%86%99%E4%BD%9C/"/>
    
      <category term="LaTeX" scheme="https://github.com/zysps1/categories/%E5%86%99%E4%BD%9C/LaTeX/"/>
    
    
      <category term="写作" scheme="https://github.com/zysps1/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="LaTeX" scheme="https://github.com/zysps1/tags/LaTeX/"/>
    
  </entry>
  
  <entry>
    <title>scholar thesis</title>
    <link href="https://github.com/zysps1/2019/09/03/%E5%A6%82%E4%BD%95%E5%86%99%E5%AD%A6%E6%9C%AF%E8%AE%BA%E6%96%87%E8%8B%B1%E6%96%87%E6%91%98%E8%A6%81/"/>
    <id>https://github.com/zysps1/2019/09/03/如何写学术论文英文摘要/</id>
    <published>2019-09-03T07:55:10.000Z</published>
    <updated>2019-09-03T08:10:38.554Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何写学术论文英文摘要"><a href="#如何写学术论文英文摘要" class="headerlink" title="如何写学术论文英文摘要"></a><center>如何写学术论文英文摘要</center></h3><center>Marshal Zheng</center><center>2019-06-02</center>#### 背景介绍<p>​      写学术论文的英文摘要是深造必经的一个训练，所以本文作者在查阅诸多资料的基础上，写下此文章，供分享和备忘。</p><h4 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h4><ul><li>一般以本学校或投稿要求决定</li><li>若没有具体要求，我常用以下格式：<ul><li>字体：Times New Roman</li><li>字号：小四</li><li>行间距：20磅</li><li>效果自行发现……</li></ul></li></ul><a id="more"></a><p><img src="/marshal_zheng.github.io/.com//C:%5CUsers%5Czysps%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1559463238665.png" alt="1559463238665"></p><ul><li>ps：整体看起来比较美观，由于英文字体有其自有的特点，这样的排版使得看上去不密密麻麻，也更容易阅读和修改。</li></ul><h4 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h4><ul><li>正式文体<ul><li>用词规范</li><li>句子完整</li><li>少用缩写词，如果用，要做好标注</li></ul></li><li>精炼<ul><li>尽量不要举例子</li><li>整体内容衔接紧凑，有因有果，有条理性（连接词是个好方法）</li></ul></li><li>具体<ul><li>每个概念表述具体，尽量不要写“与……有关”，直接写“show what”，“demonstrate what”……</li><li>完成了什么，实现了什么效果，说清楚好办事</li></ul></li></ul><h4 id="重要：时态和语态"><a href="#重要：时态和语态" class="headerlink" title="重要：时态和语态"></a>重要：时态和语态</h4><ul><li>一般现在时：说明研究目的，研究内容，描述结果，得出结论，提出建议，公认事实，自然规律等等<ul><li>常用的句式如：this study is/shows……，** this paper** develops……，the result shows……</li></ul></li><li>一般过去式：描述过去的发现，某一个研究过程实验等等</li><li>完成时比较少用，过去完成时描述过去的过去</li><li>语态：一般用被动语态，多用第三人称</li><li>语态例句：A and B were evaluated by……. To describe……，this paper illustrates……</li><li><strong>重要注意点</strong>：<ul><li>在介绍背景资料时，如果是不受时间影响的普遍事实，使用现在时;如果是对某种研究趋势的概述，可以用现在完成时。</li><li>在叙述研究目的或主要研究活动时，如果采用“论文导向”，多使用现在时，比如 This paper presents…，因为论文写作的时间是现在;如果采用“研究导向”，则使用过去时，比如 This study investigated…，因为研究已经完成。</li><li>在概述主要结果时，通常用现在时。</li><li>叙述结论或建议时，可使用现在时和将来时。</li></ul></li></ul><h4 id="理想的摘要内容"><a href="#理想的摘要内容" class="headerlink" title="理想的摘要内容"></a>理想的摘要内容</h4><ul><li>目的和范围：简明扼要的说明研究的目的和范围，或者说明写文章的原因，暗示该项研究的特点，结果和意义<ul><li>例如：</li><li>This paper develops a theoretical framework to evaluate the benefits and costs of energy projects in oil-producing developing countries. This paper presents an approach to equipment reliability prediction based on the concept that failures of electronic equipment are ultimately due to chemical, mechanical and/or metallurgical processes. This paper ( report, thesis，work, presentation, document, account, etc.) describes ( reports, explains, outlines, summarizes, documents, evaluates, surveys, develops, investigates, discusses, focuses on, analyzes, etc. ) the results (approach, role, framework, etc.) of … This paper ( article, report, etc.) addresses ( is concerned with, argues, specifies, covers, etc.) the following questions… This paper has three main objectives… This research project is devoted to… The objective ( purpose, motivation, etc.) of this paper ( report, program, etc.) is… Our goal has been to develop… </li></ul></li><li>方法和过程：一般使用常用名词短语前置，重点内容显著强调，特别注重描述新方法，注意使用连接词使之前后连贯<ul><li>例如：</li><li>Procedures for testing atmospheric transport and dispersion models for distances of several hundred to 1000 km from sources of pollutants are reviewed. The first known measurement of the differential cross section for electron capture to the continuum (ECC) from atomic hydrogen is presented.</li></ul></li><li>结果和结论：清楚清楚清楚的展现<ul><li>结果：包括实验和理论结果，观察到的现象规律等等</li><li>结论：结果的价值、用途与意义，也包括假设和建议等等</li><li>例如：</li><li>It was found that both molecular weight an d its distribution affected tensile strength It has been observed (shown, proved , etc.) that… These experiments indicate (reveal, show, demonstrate, etc.) that… The approach (method, framework, etc.) promises to be very useful for… The (experimental) results show (indicate, suggest, etc.)that… It is shown (concluded, proposed, etc.)that… This could imply that… This strategy appeared to be effective in… These studies are of significance to … These results have direct application to… </li></ul></li></ul><h4 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h4><h5 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h5><ul><li>开门见山<ul><li>This paper describes recent modeling and experimental studies of reverse combustion (RC) linking, aimed at understanding the propagation of dynamics of a RC front.</li></ul></li><li>引人入胜<ul><li>Recent research on parallel systems has shown that the most difficult problem for system designers and users is inter-processor connection and communication. A methodology for the automated design and implementation of inter-processor communication for certain multiple-processor systems has been developed and is presented in this paper. </li></ul></li></ul><h5 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h5><ul><li>使用结论结尾，而不只是结果<ul><li>The results indicate that the sludge ash could be used as a partial replacement for cement in concrete. Hot hardness testing promises to be very useful for geoscientific purposes and applicable to a wide range of experimental research.</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;如何写学术论文英文摘要&quot;&gt;&lt;a href=&quot;#如何写学术论文英文摘要&quot; class=&quot;headerlink&quot; title=&quot;如何写学术论文英文摘要&quot;&gt;&lt;/a&gt;&lt;center&gt;如何写学术论文英文摘要&lt;/center&gt;&lt;/h3&gt;&lt;center&gt;Marshal Zheng&lt;/center&gt;
&lt;center&gt;2019-06-02&lt;/center&gt;
#### 背景介绍

&lt;p&gt;​      写学术论文的英文摘要是深造必经的一个训练，所以本文作者在查阅诸多资料的基础上，写下此文章，供分享和备忘。&lt;/p&gt;
&lt;h4 id=&quot;基本格式&quot;&gt;&lt;a href=&quot;#基本格式&quot; class=&quot;headerlink&quot; title=&quot;基本格式&quot;&gt;&lt;/a&gt;基本格式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;一般以本学校或投稿要求决定&lt;/li&gt;
&lt;li&gt;若没有具体要求，我常用以下格式：&lt;ul&gt;
&lt;li&gt;字体：Times New Roman&lt;/li&gt;
&lt;li&gt;字号：小四&lt;/li&gt;
&lt;li&gt;行间距：20磅&lt;/li&gt;
&lt;li&gt;效果自行发现……&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="写作" scheme="https://github.com/zysps1/categories/%E5%86%99%E4%BD%9C/"/>
    
      <category term="学术论文" scheme="https://github.com/zysps1/categories/%E5%86%99%E4%BD%9C/%E5%AD%A6%E6%9C%AF%E8%AE%BA%E6%96%87/"/>
    
    
      <category term="写作" scheme="https://github.com/zysps1/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="学术论文" scheme="https://github.com/zysps1/tags/%E5%AD%A6%E6%9C%AF%E8%AE%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Javascript</title>
    <link href="https://github.com/zysps1/2019/09/03/javascript%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://github.com/zysps1/2019/09/03/javascript自学笔记/</id>
    <published>2019-09-03T07:50:10.000Z</published>
    <updated>2019-09-03T08:09:10.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Javascript-自学笔记"><a href="#Javascript-自学笔记" class="headerlink" title="Javascript 自学笔记"></a>Javascript 自学笔记</h2><h3 id="基本入门"><a href="#基本入门" class="headerlink" title="基本入门"></a>基本入门</h3><blockquote><ul><li>方法一：直接嵌在网页里，如 </li></ul><p><code>&lt;script&gt; alert(&#39;hello&#39;);&lt;/script&gt;</code></p><ul><li>方法二：放在单独js文件内，在html中通过 <code>&lt;script src=&quot;/static/js/abc.js&quot;&gt;&lt;/script&gt;</code>进行调用</li></ul></blockquote><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><blockquote><p>每个语句以<code>;</code>结束，语句块使用<code>{...}</code></p><p>赋值语句：<code>var x=1;</code></p></blockquote><a id="more"></a><blockquote><p>判断语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">if</span> (<span class="number">2</span>&gt;<span class="number">1</span>)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;x=<span class="number">1</span>;</span><br><span class="line">&gt; y=<span class="number">2</span>;</span><br><span class="line">&gt; z=<span class="number">3</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><blockquote><p>使用 <code>//</code></p><p>块注释：<code>/* ... */</code></p></blockquote><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><blockquote><p>数字：统一Number，NaN；Infinity</p><p>字符串：用单引号或者双引号括起来</p><p>布尔值：<code>true</code>;<code>false</code></p><p>与或非：<code>&amp;&amp; || !</code></p><p>比较运算：</p><ul><li><code>==</code>: 会自动转换数据类型再比较</li><li><code>===</code>不会自动转换数据类型</li><li><code>isNaN</code>是否是无穷</li></ul><p><code>null</code>:空值</p></blockquote><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><blockquote><p>数组里面可以包括任何数据类型，例如</p><p><code>[1,2,3,&#39;hello&#39;,null,true]</code></p><p>创建数组除了直接定义，还可以：</p><p><code>new Array(1,2,3);</code></p><p>一般来说，直接使用</p><p><code>var arr=[1,2,3];</code></p><p>访问数组使用：<code>arr[0]</code>,<code>arr[1]</code>…</p></blockquote><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><blockquote><p>组成：键+值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> person=&#123;</span><br><span class="line">&gt;  name:<span class="string">'Bob'</span>,</span><br><span class="line">&gt;  age:<span class="number">20</span>,</span><br><span class="line">&gt;  tags:[<span class="string">'js'</span>,<span class="string">'web'</span>,<span class="string">'mobile'</span>],</span><br><span class="line">&gt;  city:<span class="string">'Beijing'</span>,</span><br><span class="line">&gt;  hasCar:<span class="literal">true</span>,</span><br><span class="line">&gt;  zipcode:<span class="literal">null</span></span><br><span class="line">&gt; &#125;;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>键都是字符串类型，值可以是任意数据类型，每个键也称作对象的属性，例如 <code>person</code>的<code>name</code>属性为<code>&#39;Bob&#39;</code></p><p>获得对象属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; person.name;</span><br><span class="line">&gt; person.zipcode;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> a;</span><br><span class="line">&gt; <span class="keyword">var</span> $b=<span class="number">1</span>;<span class="comment">//申明变量b，并给b赋值</span></span><br><span class="line">&gt; <span class="keyword">var</span> s_007=<span class="string">'007'</span>;</span><br><span class="line">&gt; <span class="keyword">var</span> Answer=<span class="literal">true</span>;</span><br><span class="line">&gt; <span class="keyword">var</span> t = <span class="literal">null</span>;</span><br><span class="line">&gt; <span class="keyword">var</span> a = <span class="number">112</span>;</span><br><span class="line">&gt; a = <span class="string">'ABC'</span>;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>显示变量的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> x=<span class="number">100</span>;</span><br><span class="line">&gt; <span class="built_in">console</span>.log(x);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="操作字符串"><a href="#操作字符串" class="headerlink" title="操作字符串"></a>操作字符串</h4><blockquote><p>字符串不可变，因此不可以对s[i]赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> s=<span class="string">'hello world'</span>;</span><br><span class="line">&gt; s.length;</span><br><span class="line">&gt; s[<span class="number">0</span>];</span><br><span class="line">&gt; s[<span class="number">3</span>];</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>toUpperCase：把一个字符串全部变为大写</p><p>toLowerCase：把一个字符串全部变为小写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> s = <span class="string">'hello'</span>;</span><br><span class="line">&gt; <span class="keyword">var</span> upper = s.toUpperCase();</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>indexOf()：搜索字符串出现的位置；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> s = <span class="string">'hello world'</span>;</span><br><span class="line">&gt; s.indexOf(<span class="string">'world'</span>);<span class="comment">//返回1</span></span><br><span class="line">&gt; s.indexOf(<span class="string">'World'</span>);<span class="comment">//没有找到指定的字串，返回-1</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>substring()：返回指定索引区间的字串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> s = <span class="string">'hello,world'</span></span><br><span class="line">&gt; s.substring(<span class="number">0</span>,<span class="number">5</span>);<span class="comment">//从索引0开始到4，返回‘hello’</span></span><br><span class="line">&gt; s.substring(<span class="number">7</span>);<span class="comment">//从索引7开始到结束，返回'world'</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="操作数组"><a href="#操作数组" class="headerlink" title="操作数组"></a>操作数组</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="string">'hello'</span>,<span class="literal">null</span>];</span><br><span class="line">&gt; arr.length;</span><br><span class="line">&gt; arr[<span class="number">1</span>]=<span class="number">23</span>;</span><br><span class="line">&gt; arr;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>indexOf()：搜索一个元素的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> arr=[<span class="number">10</span>,<span class="number">20</span>,<span class="string">'30'</span>];</span><br><span class="line">&gt; arr.indexOf(<span class="number">10</span>);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>slice()：截取部分元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> arr=[<span class="string">'1'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'3'</span>];</span><br><span class="line">&gt; arr.slice(<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//从0开始到第二个</span></span><br><span class="line">&gt; arr.slice(<span class="number">3</span>);<span class="comment">//从索引3开始到结束</span></span><br><span class="line">&gt; arr.slice;<span class="comment">//复制数组</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>unshift：向数组头部添加若干元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">&gt; arr.unshift(<span class="string">'1'</span>,<span class="string">'2'</span>);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>shift()：把array数组的第一个元素删掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">&gt; arr.shift();</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>sort：对当前数组进行排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>];</span><br><span class="line">&gt; arr.sort();</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>reverse：把数组元素反向排列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">65</span>];</span><br><span class="line">&gt; arr.reverse();</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>splice()：修改数组，从指定索引开始删除若干元素，然后再从该位置添加若干元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; arr.splice(<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//从索引2开始删除三个元素</span></span><br><span class="line">&gt; arr.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">'gll'</span>,<span class="string">'apple'</span>);<span class="comment">//从索引2开始删除0个元素，并从索引2之前开始添加新元素‘gll'，’apple‘</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>cancat：把两个数组连接起来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&gt; <span class="keyword">var</span> added = arr.cancat([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>join：把每个元素都用指定字符串连接起来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">&gt; arr.join(<span class="string">'-'</span>);<span class="comment">//[2-3-4]</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>多维数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> arr=[[<span class="number">20</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">23</span>,<span class="number">4</span>,<span class="number">2</span>],<span class="string">'-'</span>];</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> xiaohong = &#123;</span><br><span class="line">&gt;  name: <span class="string">'小红'</span>,</span><br><span class="line">&gt;  <span class="string">'middle-school'</span>: ’no<span class="number">.1</span> middle school<span class="string">'</span></span><br><span class="line"><span class="string">&gt; &#125;;</span></span><br><span class="line"><span class="string">&gt; </span></span><br><span class="line"><span class="string">&gt;</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>访问属性名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; xiaohong[<span class="string">'name'</span>];</span><br><span class="line">&gt; xiaohong.name;</span><br><span class="line">&gt; xiaohong[<span class="string">'middle-school'</span>];</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>动态添加属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; xiaohong.age = <span class="number">18</span>;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>动态删除属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">delete</span> xiaohong.age;</span><br><span class="line">&gt; <span class="keyword">delete</span> xiaohong[<span class="string">'name'</span>];</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>检查是否拥有某一属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="string">'name'</span> <span class="keyword">in</span> xiaohong;<span class="comment">//true</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>判断是否是自身拥有的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; xiaohong.hasOwnProperty(<span class="string">'name'</span>);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">if</span> () &#123;...&#125;</span><br><span class="line">&gt; <span class="keyword">else</span> &#123;...&#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line">&gt; <span class="keyword">if</span> (age&gt;=<span class="number">18</span>)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;  alert(<span class="string">'adult'</span>);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">else</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;  alert(<span class="string">'teenager'</span>);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;<span class="number">10000</span>;i++)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;  x = x+<span class="number">1</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>for … in：把一个对象的所有属性依次循环出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">&gt;  name: <span class="string">'xiaoming'</span>,</span><br><span class="line">&gt;  age: <span class="number">20</span></span><br><span class="line">&gt; &#125;;</span><br><span class="line">&gt; <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> xiaoming)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;  <span class="built_in">console</span>.log(key);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>要过滤掉对象继承的属性循环出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> xiaoming)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;  <span class="keyword">if</span> (xiaoming.hasOwnProperty(key))</span><br><span class="line">&gt;  &#123;</span><br><span class="line">&gt;      <span class="built_in">console</span>.log(key);</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>遍历数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&gt; <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> a)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;  <span class="built_in">console</span>.log(a[i]);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>while</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line">&gt; <span class="keyword">var</span> n = <span class="number">90</span>;</span><br><span class="line">&gt; <span class="keyword">while</span> (n&gt;<span class="number">0</span>)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;  x = x+n;</span><br><span class="line">&gt;  n = n<span class="number">-2</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="键值对-Map-和-Set"><a href="#键值对-Map-和-Set" class="headerlink" title="键值对 Map 和 Set"></a>键值对 Map 和 Set</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'michael'</span>,<span class="number">96</span>],[<span class="string">'Bob'</span>,<span class="number">76</span>],[<span class="string">'ten'</span>,<span class="number">76</span>]]);</span><br><span class="line">&gt; m.get(<span class="string">'michael'</span>);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">&gt; m.set(<span class="string">'Adam'</span>,<span class="number">65</span>);</span><br><span class="line">&gt; m.set(<span class="string">'Bob'</span>,<span class="number">76</span>);</span><br><span class="line">&gt; m.has(<span class="string">'Adam'</span>);<span class="comment">//是否存在Adam</span></span><br><span class="line">&gt; m.get(<span class="string">'Adam'</span>);<span class="comment">//65</span></span><br><span class="line">&gt; m.delete(‘Adam’);<span class="comment">//删除'Adam'</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>Set不存储value，key不重复</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">&gt; <span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">&gt; add(<span class="number">4</span>);</span><br><span class="line">&gt; <span class="keyword">delete</span>(<span class="number">3</span>);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="iterable"><a href="#iterable" class="headerlink" title="iterable"></a>iterable</h4><blockquote><p>Map和Set无法使用下标循环，可以使用<code>for ... of</code>循环遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> a = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>];</span><br><span class="line">&gt; <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>]);</span><br><span class="line">&gt; <span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>,<span class="string">'x'</span>],[<span class="number">2</span>,<span class="string">'y'</span>],[<span class="number">3</span>,<span class="string">'z'</span>]]);</span><br><span class="line">&gt; <span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> a) <span class="comment">//遍历a</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;  <span class="built_in">console</span>.log(x);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> s)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;  <span class="built_in">console</span>.log(x);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> m)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;  <span class="built_in">console</span>.log(x[<span class="number">0</span>]+<span class="string">'='</span>+x[<span class="number">1</span>]); <span class="comment">//输出1=x,2=y,3=z</span></span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>更好的，使用 <code>forEach</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> a = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>];</span><br><span class="line">&gt; a.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element,index,array</span>)</span>&#123;</span><br><span class="line">&gt;  <span class="built_in">console</span>.log(element + <span class="string">',index='</span> + index);</span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt; <span class="comment">//A, index = 0</span></span><br><span class="line">&gt; <span class="comment">//B, index = 1</span></span><br><span class="line">&gt; <span class="comment">//C, index = 2</span></span><br><span class="line">&gt; <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'A'</span>,<span class="string">'B'</span>]);</span><br><span class="line">&gt; s.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element,sameelement,set</span>)</span>&#123;</span><br><span class="line">&gt;  <span class="built_in">console</span>.log(element);</span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt; <span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>,<span class="string">'x'</span>],[<span class="number">2</span>,<span class="string">'y'</span>],[<span class="number">3</span>,<span class="string">'z'</span>]]);</span><br><span class="line">&gt; m.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value,key,map</span>)</span>&#123;</span><br><span class="line">&gt;  <span class="built_in">console</span>.log(value);</span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="函数定义和调用"><a href="#函数定义和调用" class="headerlink" title="函数定义和调用"></a>函数定义和调用</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>)</span></span><br><span class="line"><span class="function">&gt; </span>&#123;</span><br><span class="line">&gt;  <span class="keyword">if</span> (x&gt;=<span class="number">0</span>)</span><br><span class="line">&gt;      <span class="keyword">return</span> x;</span><br><span class="line">&gt;  <span class="keyword">else</span></span><br><span class="line">&gt;      <span class="keyword">return</span> -x;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>或者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>)</span></span><br><span class="line"><span class="function">&gt; </span>&#123;</span><br><span class="line">&gt;  <span class="keyword">if</span> (x&gt;=<span class="number">0</span>)</span><br><span class="line">&gt;      <span class="keyword">return</span> x;</span><br><span class="line">&gt;  <span class="keyword">else</span></span><br><span class="line">&gt;      <span class="keyword">return</span> -x;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>javascript 允许传入任意个参数而不影响调用，例如<code>abs(-3,&#39;hha&#39;)</code></p><p>要避免收到 <code>undefined</code>，需要对参数进行检查</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; funtion abs(x)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;  <span class="keyword">if</span> (<span class="keyword">typeof</span> x !== <span class="string">'number'</span>)</span><br><span class="line">&gt;  &#123;</span><br><span class="line">&gt;      <span class="keyword">throw</span> <span class="string">'Not a number'</span>;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;  <span class="keyword">if</span> (x&gt;=<span class="number">0</span>)</span><br><span class="line">&gt;      &#123;</span><br><span class="line">&gt; ...&#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>argument：获得调用者传入的所有参数，可以用于判断是否传入了参数，或者传入的个数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">&gt; </span>&#123;</span><br><span class="line">&gt;  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">0</span>)</span><br><span class="line">&gt;  &#123;</span><br><span class="line">&gt;      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;  <span class="keyword">var</span> x = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">&gt;  erturn x &gt;=<span class="number">0</span> ? x : -x;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b,c</span>)</span></span><br><span class="line"><span class="function">&gt; </span>&#123;</span><br><span class="line">&gt;  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length ===<span class="number">2</span>)</span><br><span class="line">&gt;  &#123;</span><br><span class="line">&gt;      c = b;</span><br><span class="line">&gt;      b = <span class="literal">null</span>;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>由于函数可以接受任意多个参数，所以需要使用arguments来获取所有参数，为了方便，引入了rest参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b,...rest</span>)</span></span><br><span class="line"><span class="function">&gt; </span>&#123;</span><br><span class="line">&gt;  <span class="built_in">console</span>.log(a);</span><br><span class="line">&gt;  <span class="built_in">console</span>.log(b);</span><br><span class="line">&gt;  <span class="built_in">console</span>.log(rest);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; fo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">&gt; <span class="comment">//1</span></span><br><span class="line">&gt; <span class="comment">//2</span></span><br><span class="line">&gt; <span class="comment">//[3,4,5]</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h4><blockquote><p>所有变量被绑定到一个全局对象<code>window</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> cou = <span class="string">'23'</span>;</span><br><span class="line">&gt; alert(cou);</span><br><span class="line">&gt; alert(<span class="built_in">window</span>.cou);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>定义自己唯一的全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> MYAPP = &#123;&#125;;</span><br><span class="line">&gt; MYAPP.name = <span class="string">'myapp'</span>;</span><br><span class="line">&gt; MYAPP.version = <span class="number">1.0</span>;</span><br><span class="line">&gt; MYAPP.foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;  <span class="keyword">return</span> <span class="string">'foo'</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>块级作用域声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">&gt; </span>&#123;</span><br><span class="line">&gt; <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">&gt;  <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">&gt;      sum += i;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>定义常量 const</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>解构赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> [x,y,z] = [<span class="string">'hello'</span>,<span class="string">'js'</span>,<span class="string">'es'</span>];</span><br><span class="line">&gt; <span class="comment">//x = hello</span></span><br><span class="line">&gt; <span class="comment">//y = js</span></span><br><span class="line">&gt; <span class="comment">//z = es</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>解构赋值也可以忽略某些元素或者嵌套赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">let</span> [x,[y,z]] = [<span class="string">'hello'</span>,[<span class="string">'js'</span>,<span class="string">'es'</span>]];</span><br><span class="line">&gt; <span class="keyword">let</span> [,,z] = [<span class="string">'hello'</span>,<span class="string">'js'</span>,<span class="string">'es'</span>];</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>解构赋值也可以对嵌套对象的属性进行赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> person = &#123;</span><br><span class="line">&gt;  name:<span class="string">'xiaoming'</span></span><br><span class="line">&gt;  age: <span class="number">19</span>,</span><br><span class="line">&gt;  addr: &#123;</span><br><span class="line">&gt;      city:<span class="string">'beijing'</span>,</span><br><span class="line">&gt;      street:<span class="string">'no1 street'</span></span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">var</span> &#123;name,<span class="attr">address</span>:&#123;city,street&#125;&#125; = person;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>交换变量值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> x=<span class="number">1</span>;</span><br><span class="line">&gt; <span class="keyword">var</span> y=<span class="number">2</span>;</span><br><span class="line">&gt; [x,y] = [y,x];</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>快速获取当前页面的域名和路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> &#123;<span class="attr">hostname</span>:domain, <span class="attr">pathname</span>:path&#125; = location;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><blockquote><p>在一个对象中绑定函数，叫做这个对象的方法</p><p>其中 <code>this</code>始终指向当前对象，是一个特殊变量</p><p>使用<code>this</code>前首先使用<code>var that = this;</code>来捕获<code>this</code>，否则<code>this</code>指向全局对象<code>window</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">&gt;  name:<span class="string">'xiaoming'</span>,</span><br><span class="line">&gt;  birth:<span class="number">1990</span>,</span><br><span class="line">&gt;  age:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&gt;      <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">&gt;      <span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;          <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">&gt;          <span class="keyword">return</span> y-that.birth;</span><br><span class="line">&gt;      &#125;</span><br><span class="line">&gt;      <span class="keyword">return</span> geAge();</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>apply：指定函数的this指向哪个参数，还可以使用<code>apply()</code>方法，第一个参数是需要绑定的变量，第二个是数组，表示函数本身的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">getage</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;  <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">&gt;  <span class="keyword">return</span> y = <span class="keyword">this</span>.birth;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">&gt;  name: <span class="string">'xiaoming'</span>,</span><br><span class="line">&gt;  birth: <span class="number">1990</span>,</span><br><span class="line">&gt;  age: getage</span><br><span class="line">&gt; &#125;;</span><br><span class="line">&gt; xiaoming.age();</span><br><span class="line">&gt; getage.apply(xiaoming,[]);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>call：与apply类似，只是参数传入是不需要变成数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; max.apply(<span class="literal">null</span>,[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line">&gt; max.call(<span class="literal">null</span>,[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line">&gt; <span class="comment">//普通函数调用`this`绑定为null</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>装饰器，不改变原方法统计代码调用次数</p></blockquote><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><blockquote><p>让函数的参数能够接收别的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y,f</span>)</span>&#123;</span><br><span class="line">&gt;  <span class="keyword">return</span> f(x)+f(y);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">var</span> x = add(<span class="number">-5</span>,<span class="number">5</span>,<span class="built_in">Math</span>.abs);</span><br><span class="line">&gt; <span class="built_in">console</span>.log(x);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>map</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/0013879622109990efbf9d781704b02994ba96765595f56000/0" alt="map示例"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">pow</span>(<span class="params">x</span>)</span></span><br><span class="line"><span class="function">&gt; </span>&#123;</span><br><span class="line">&gt;  <span class="keyword">return</span> x*x;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">&gt; <span class="keyword">var</span> results = arr.map(pow);</span><br><span class="line">&gt; <span class="built_in">console</span>.log(results);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>当然也可以循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>)</span>&#123;</span><br><span class="line">&gt;  <span class="keyword">return</span> x*x;</span><br><span class="line">&gt; &#125;;</span><br><span class="line">&gt; <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">&gt; <span class="keyword">var</span> result - [];</span><br><span class="line">&gt; <span class="keyword">for</span> (i = <span class="number">0</span>;i&lt;arr.length;i++)</span><br><span class="line">&gt;  result.push(f(arr[i]));</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>map还可以用于其他函数，如把数组中所有数字变成字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">&gt; arr.map(<span class="built_in">String</span>);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>reduce：把结构和序列的下一个元素累积计算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//求和</span></span><br><span class="line">&gt; <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&gt; arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">&gt;  <span class="keyword">return</span> x+y;</span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt; <span class="comment">//求积</span></span><br><span class="line">&gt; arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">&gt;  <span class="keyword">return</span> x*y;</span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt; <span class="comment">//比如有两个输入参数</span></span><br><span class="line">&gt; <span class="comment">//数字组合</span></span><br><span class="line">&gt; arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">&gt;  <span class="keyword">return</span> x*<span class="number">10</span>+y;</span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt; <span class="comment">//[1,3,4,5]-&gt;&gt;&gt;1345</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>把字符串变成数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> ss = s.split(<span class="string">""</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">&gt; <span class="keyword">return</span> x*<span class="number">1</span>&#125;);</span><br><span class="line">&gt; <span class="keyword">return</span>  ss.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">&gt; <span class="keyword">return</span> x*<span class="number">10</span>+y;</span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字。输入：<code>[&#39;adam&#39;, &#39;LISA&#39;, &#39;barT&#39;]</code>，输出：<code>[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;]</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">&gt; <span class="keyword">return</span> i[<span class="number">0</span>].toUpperCase()+i.slice(<span class="number">1</span>).toLowerCase();</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>利用<code>map()</code>把字符串变成整数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> arr = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>];</span><br><span class="line">&gt; <span class="keyword">var</span> r;</span><br><span class="line">&gt; r = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">&gt;  <span class="keyword">return</span> +i;</span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt; <span class="comment">//或者</span></span><br><span class="line">&gt; r = arr.map(<span class="built_in">Number</span>);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>filter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//删掉偶数，只保留奇数</span></span><br><span class="line">&gt; <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">&gt; <span class="keyword">var</span> r = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">&gt;  <span class="keyword">return</span> x%<span class="number">2</span>!==<span class="number">0</span>;</span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>把空字符串删掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> arr = [<span class="string">'A'</span>,<span class="string">''</span>];</span><br><span class="line">&gt; <span class="keyword">var</span> r = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">&gt;  <span class="keyword">return</span> s &amp;&amp; s.trim();</span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>去除数组中的重复元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; r = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">element,index,self</span>)</span>&#123;</span><br><span class="line">&gt;  <span class="keyword">return</span> self.indexOf(element) === index;</span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>筛选素数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">get_primes</span>(<span class="params">arr</span>)</span></span><br><span class="line"><span class="function">&gt; </span>&#123;</span><br><span class="line">&gt;  <span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">&gt;      <span class="keyword">if</span> (x===<span class="number">1</span>)</span><br><span class="line">&gt;          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&gt;      <span class="keyword">else</span>&#123;</span><br><span class="line">&gt;          <span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line">&gt;          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>;i&lt;x;i++)&#123;</span><br><span class="line">&gt;              <span class="keyword">if</span> (x%i===<span class="number">0</span>) </span><br><span class="line">&gt;                  a = <span class="literal">false</span>;</span><br><span class="line">&gt;          &#125;</span><br><span class="line">&gt;      <span class="keyword">return</span> a;</span><br><span class="line">&gt;      &#125;</span><br><span class="line">&gt;  &#125;)</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><blockquote><p>数字大小排序，不能简单用<code>sort</code>，会出现错误</p><p>由于<code>sort</code>是高阶函数，所以还可以自定义如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">32</span>,<span class="number">34</span>,<span class="number">2</span>];</span><br><span class="line">&gt; arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">&gt;  <span class="keyword">if</span>(x&lt;y)&#123;</span><br><span class="line">&gt;      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;  <span class="keyword">if</span>(x&gt;y)&#123;</span><br><span class="line">&gt;      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt; <span class="built_in">console</span>.log(arr);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>倒序排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">32</span>,<span class="number">34</span>,<span class="number">2</span>];</span><br><span class="line">&gt; arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">&gt;  <span class="keyword">if</span>(x&lt;y)&#123;</span><br><span class="line">&gt;      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;  <span class="keyword">if</span>(x&gt;y)&#123;</span><br><span class="line">&gt;      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt; <span class="built_in">console</span>.log(arr);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>排序字符串不忽略大小写直接<code>sort</code></p><p>如果忽略大小写，那么有</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> arr = [<span class="string">'Goole'</span>,<span class="string">'apple'</span>,<span class="string">'Microsoft'</span>];</span><br><span class="line">&gt; arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">s1,s2</span>)</span>&#123;</span><br><span class="line">&gt;  x1 = s1.toUpperCase();</span><br><span class="line">&gt;  x2 = s2.toUpperCase();</span><br><span class="line">&gt;  <span class="keyword">if</span> (x1&lt;x2)&#123;</span><br><span class="line">&gt;      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;  <span class="keyword">if</span> (x1&gt;x2)&#123;</span><br><span class="line">&gt;      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>注意：<code>sort()</code>方法会对数据进行修改</p></blockquote><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><blockquote><p>数组求和：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>)</span>&#123;&#123;</span><br><span class="line">&gt;  <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">&gt;  <span class="keyword">return</span> x+y;</span><br><span class="line">&gt; &#125;)</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>返回求和函数的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">lazy_sum</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">&gt;  <span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;      retuan arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">&gt;          <span class="keyword">return</span> x+y;</span><br><span class="line">&gt;      &#125;);</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;  <span class="keyword">return</span> sum;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="comment">//调用函数时，返回求和函数f</span></span><br><span class="line">&gt; f = lazy_sum([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line">&gt; f();<span class="comment">//10</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="params">x</span>=&gt;</span>x*x;</span><br><span class="line">&gt; <span class="comment">//等价于</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">&gt;  <span class="keyword">return</span> x*x;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="comment">//返回一个对象</span></span><br><span class="line">&gt; <span class="function"><span class="params">x</span>=&gt;</span>(&#123;<span class="attr">foo</span>:x&#125;);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//箭头函数内部的 this 是语法作用域，由上下文确定</span></span><br><span class="line">&gt; <span class="keyword">var</span> obj = &#123;</span><br><span class="line">&gt;  birth: <span class="number">1990</span>,</span><br><span class="line">&gt;  getage:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&gt;      <span class="keyword">var</span> b = <span class="keyword">this</span>.birth;</span><br><span class="line">&gt;      <span class="keyword">var</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="keyword">this</span>.birth;</span><br><span class="line">&gt;      <span class="keyword">return</span> fn();</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt; &#125;;</span><br><span class="line">&gt; obj.getage();</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>箭头函数简化排序函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; arr.sort(<span class="function">(<span class="params">x,y</span>)=&gt;</span>&#123;</span><br><span class="line">&gt;  <span class="keyword">return</span> x-y;</span><br><span class="line">&gt;  <span class="comment">//或者 return x&lt;y? -1:1;</span></span><br><span class="line">&gt;  <span class="comment">//或者 arr.sort((x,y)=&gt; x-y)</span></span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="generator生成器"><a href="#generator生成器" class="headerlink" title="generator生成器"></a>generator生成器</h4><blockquote><p>可以返回多次，定义如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">&gt;  <span class="keyword">yield</span> x+<span class="number">1</span>;</span><br><span class="line">&gt;  <span class="keyword">yield</span> x+<span class="number">2</span>;</span><br><span class="line">&gt;  <span class="keyword">return</span> x+<span class="number">3</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>产生斐波那契数列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//方法一</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">fid</span>(<span class="params">max</span>)</span>&#123;</span><br><span class="line">&gt;  <span class="keyword">var</span> t,</span><br><span class="line">&gt;      a=<span class="number">0</span>,</span><br><span class="line">&gt;      b=<span class="number">1</span>,</span><br><span class="line">&gt;      arr = [<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">&gt;  <span class="keyword">while</span>(arr.length&lt;max)&#123;</span><br><span class="line">&gt;      [a,b] = [b,a+b];</span><br><span class="line">&gt;      arr.push(b);</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;  <span class="keyword">return</span> arr;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="comment">//方法二</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">function</span>* <span class="title">fid</span>(<span class="params">max</span>)</span>&#123;</span><br><span class="line">&gt;  <span class="keyword">var</span> t,</span><br><span class="line">&gt;      a = <span class="number">0</span>,</span><br><span class="line">&gt;      b = <span class="number">1</span>,</span><br><span class="line">&gt;      n = <span class="number">0</span>;</span><br><span class="line">&gt;  <span class="keyword">while</span> (n&lt;max)</span><br><span class="line">&gt;  &#123;</span><br><span class="line">&gt;      <span class="keyword">yield</span> a;</span><br><span class="line">&gt;      [a,b] = [b,a+b];</span><br><span class="line">&gt;      n++;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;  <span class="keyword">return</span>;</span><br><span class="line">&gt; &#125; </span><br><span class="line">&gt; <span class="comment">//调用</span></span><br><span class="line">&gt; <span class="keyword">var</span> f = fid(<span class="number">5</span>);</span><br><span class="line">&gt; f.next();<span class="comment">//0</span></span><br><span class="line">&gt; f.next();<span class="comment">//1</span></span><br><span class="line">&gt; f.next();<span class="comment">//1</span></span><br><span class="line">&gt; f.next();<span class="comment">//2</span></span><br><span class="line">&gt; f.next();<span class="comment">//3</span></span><br><span class="line">&gt; <span class="comment">//或者使用for of调用</span></span><br><span class="line">&gt; <span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> fid(<span class="number">10</span>))&#123;</span><br><span class="line">&gt;  <span class="built_in">console</span>.log(x);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="comment">//依次输出0,1,1,2,3...</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Javascript-自学笔记&quot;&gt;&lt;a href=&quot;#Javascript-自学笔记&quot; class=&quot;headerlink&quot; title=&quot;Javascript 自学笔记&quot;&gt;&lt;/a&gt;Javascript 自学笔记&lt;/h2&gt;&lt;h3 id=&quot;基本入门&quot;&gt;&lt;a href=&quot;#基本入门&quot; class=&quot;headerlink&quot; title=&quot;基本入门&quot;&gt;&lt;/a&gt;基本入门&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;方法一：直接嵌在网页里，如 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt; alert(&amp;#39;hello&amp;#39;);&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法二：放在单独js文件内，在html中通过 &lt;code&gt;&amp;lt;script src=&amp;quot;/static/js/abc.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;进行调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;基本语法&quot;&gt;&lt;a href=&quot;#基本语法&quot; class=&quot;headerlink&quot; title=&quot;基本语法&quot;&gt;&lt;/a&gt;基本语法&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;每个语句以&lt;code&gt;;&lt;/code&gt;结束，语句块使用&lt;code&gt;{...}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;赋值语句：&lt;code&gt;var x=1;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://github.com/zysps1/categories/javascript/"/>
    
      <category term="前端" scheme="https://github.com/zysps1/categories/javascript/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="https://github.com/zysps1/tags/javascript/"/>
    
      <category term="前端" scheme="https://github.com/zysps1/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/zysps1/2019/09/03/the-first-one/"/>
    <id>https://github.com/zysps1/2019/09/03/the-first-one/</id>
    <published>2019-09-03T07:30:15.000Z</published>
    <updated>2019-09-03T07:49:36.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Welcome-to-my-personal-page"><a href="#Welcome-to-my-personal-page" class="headerlink" title="Welcome to my personal page!"></a>Welcome to my personal page!</h2><h4 id="I-Summary"><a href="#I-Summary" class="headerlink" title="I. Summary"></a>I. Summary</h4><p>This is the second time that I try to set up a personal web page with the resources on the Internet.(An undergraduate student usually has no extra money to buy an independent commercial server, which may look cool for he(or she) and his(or her) friends)</p><a id="more"></a><p><img src="https://raw.githubusercontent.com/zysps1/photoforpersonal/master/cool.jpg" alt="cool"></p><h4 id="II-STAGE-ONE"><a href="#II-STAGE-ONE" class="headerlink" title="II. STAGE ONE"></a>II. STAGE ONE</h4><p>I tried several ways to set up my personal web page hosted on some cost-free website before. But  a lot of problems unexpectedly rushed to me like floods. In majority of the cases, my school assignments and daily study schedule force me to give up as quickly as I can.</p><p>However, as a young man with inexhaustible enthusiasm and patience, I continued to plunged into my work with immense zeal, although the reality always damped my ardour.</p><p><img src="https://raw.githubusercontent.com/zysps1/photoforpersonal/master/holdon.jpeg" alt="hold on"></p><h4 id="III-STAGE-TWO"><a href="#III-STAGE-TWO" class="headerlink" title="III. STAGE TWO"></a>III. STAGE TWO</h4><p>Until now, I have written 170+ articles on <a href="https://blog.csdn.net/zysps1" target="_blank" rel="noopener">CSDN blog</a> and my CSDN blog has received more than 10,000 visits from April to August in 2019.</p><p><img src="https://raw.githubusercontent.com/zysps1/photoforpersonal/master/happy.jpeg" alt="happy"></p><h4 id="IV-STAGE-THREE"><a href="#IV-STAGE-THREE" class="headerlink" title="IV. STAGE THREE"></a>IV. STAGE THREE</h4><p>Even if it seems that I have found a quite comfortable way to take extracurricular notes, write some memorandums and share my feelings and thoughts, I still want to  ‘taste’ something more, because there are varieties of delicious ‘food’ in such a colorful society.</p><p>Then this personal web page is finished.</p><h4 id="V-CONCLUSION"><a href="#V-CONCLUSION" class="headerlink" title="V. CONCLUSION"></a>V. CONCLUSION</h4><p>Just for fun and curiosity! </p><p>Just pursue and explore the unknown and tap the potential of myself!</p><p><img src="https://raw.githubusercontent.com/zysps1/photoforpersonal/master/wu.jpg" alt="wu"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Welcome-to-my-personal-page&quot;&gt;&lt;a href=&quot;#Welcome-to-my-personal-page&quot; class=&quot;headerlink&quot; title=&quot;Welcome to my personal page!&quot;&gt;&lt;/a&gt;Welcome to my personal page!&lt;/h2&gt;&lt;h4 id=&quot;I-Summary&quot;&gt;&lt;a href=&quot;#I-Summary&quot; class=&quot;headerlink&quot; title=&quot;I. Summary&quot;&gt;&lt;/a&gt;I. Summary&lt;/h4&gt;&lt;p&gt;This is the second time that I try to set up a personal web page with the resources on the Internet.(An undergraduate student usually has no extra money to buy an independent commercial server, which may look cool for he(or she) and his(or her) friends)&lt;/p&gt;
    
    </summary>
    
      <category term="feelings" scheme="https://github.com/zysps1/categories/feelings/"/>
    
      <category term="blog" scheme="https://github.com/zysps1/categories/feelings/blog/"/>
    
    
      <category term="feelings" scheme="https://github.com/zysps1/tags/feelings/"/>
    
      <category term="blog" scheme="https://github.com/zysps1/tags/blog/"/>
    
  </entry>
  
</feed>
